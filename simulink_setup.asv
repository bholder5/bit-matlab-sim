addpath('./Miscellaneous/')
addpath('./ADCS/')
addpath('./Plant_functions/')
addpath('./flexible_model_data/')
% addpath('/home/brad/bit-matlab-sim/codegen/mex/bit_one_step_mex')
% 
% ARCSEC = 4.848136805555555555555555555e-6;
% ARCMIN = inv(180/pi*60);
% tau_f_max = 11.14; 
% ts_f = 21.965/7.718/1000.0; 
% tau_f_thresh = 0.001;
% tau_c_max = 11.14;
% 
% factor = 15;
% 
% kp_f = 10*[1000,10,10]';
% kd_f = [0.001,0.00,0.001]';
% ki_f = [0.1,0.1,1]';
% 
% kp_rw = 18.0;
% kd_rw =  0.;
% ki_rw =  1.8;
% 
% q_k = eye(3) * ((ARCSEC/3.0/(sqrt(50))*4.0)^2);
% r_k = eye(3) * ((ARCSEC/3.0/5.0)^2);

% theta_0 = 0*[0.,0.4*pi/180.0,0.4*pi/180.0,0.1*pi/180.0,0.1*pi/180.0,0.1*pi/180.0,0.,0.1,40*pi/180]';
theta_0 = [0,0.5*pi/180,-0.5*pi/180,0,0,0.0,0,0,1*-40*pi/180]';
thet_pit_nom = 1* -40*pi/180

%setting IC from past sim
% y0 = [0.017552353814854, -0.002156992032555, -0.002273627285241, ...
%     -0.004091940730352,  -0.002796089196615,   0.019674817779806,...
%     -0.017606183923045,                   0,                   0, ...
%      0.207860712172010,  -0.003878840466313,  -0.004340266988222, ...
%     -0.001098037684871,  -0.001085183886166,  -0.001924742862772, ...
%      2.937417436471931,                   0,                   0, ...
%                      0,                   0, 28.274274172758336]';
theta_des = [0.,0.4*pi/180.0,0.4*pi/180.0,0.1*pi/180.0,0.1*pi/180.0,0.1*pi/180.0,0.,0,-40*pi/180]';
d_theta_dt_0 = [0.,0.,0.,0.,0.,0.,0.,0.,0.]'; 

% theta_0(2) = deg2rad(0.5)*0;

y_flex = zeros(104,1)+1.1;
x_flex0 = y_flex;
tau_flex = zeros(5,1);


i_rw = reshape([10.0,0.,0.,0.,10.0,0.,0.,0.,9.0], 3, 3);
hs_rw = i_rw*pi*[0.0; 0.0; 1.0];

x0 = [d_theta_dt_0; theta_0; hs_rw];

z_n = [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0;
       0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0;
       1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0];

dt = 1e-3;
num_steps = 10;
t = 0:dt(1):dt(1)*10;
w_piv = 0.01;
piv_flag = false;
unlock2 = [1,1,1,1,1,1,0,0,0]';
unlock = eye(9);
tau_applied = 0.01*[10000; -1000; 1000; -1000; 1000; -1000; 0; 0; 0];
tau_max_piv = 20;
% tau_applied = [10;0;0;0;0;0;0;0;0]+0.1;
%% run propagator loop
x0 = [d_theta_dt_0; theta_0; hs_rw];

% end
% gains are roll pitch yaw


%% state space models
% cd('/home/bholder/bit-matlab-sim')
% addpath('/home/bholder/bit-matlab-sim/Miscellaneous')
% addpath('/home/bholder/bit-matlab-sim/flexible_model_data/')
% addpath('/home/bholder/bit-matlab-sim/Plant_functions/')
addpath('./Miscellaneous')
addpath('./flexible_model_data/')
addpath('./Plant_functions/')

syms t1 t2 t3 t4 t5 t6 t7 t8 t9 real
syms dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 real

zer = sym(0)

thet = [t1 t2 t3 t4 t5 t6 t7 t8 t9]'
d_thet = [dt1; dt2; dt3; dt4; dt5; dt6; dt7; dt8; dt9];

z_n = sym([0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0;
       0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0;
       1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0])

s7 = zeros(3,9);
for i = 1:9
    Cn = axis2rot_symb(z_n(:,i), thet(i));
    s7(:,i) = z_n(:,i);
    s7 = Cn*s7;    
end

% s7 = s7';

% s7 = subs(s7, sin(t2), t2);
% s7 = subs(s7, cos(t2), zer);
% s7 = subs(s7, sin(t3), t3);
% s7 = subs(s7, cos(t3), zer);
% s7 = subs(s7, sin(t4), t4);
% s7 = subs(s7, cos(t4), zer);
% s7 = subs(s7, sin(t5), t5);
% s7 = subs(s7, cos(t5), zer);
% s7 = subs(s7, sin(t8), t8);
% s7 = subs(s7, cos(t8), zer)
% % s7 = subs(s7, t3*t4, zer)
% % s7 = subs(s7, t4*t5, zer)


s = zeros(3,9);
for i = 1:7
    Cn = axis2rot_symb(z_n(:,i), thet(i));
    s(:,i) = z_n(:,i);
    s = Cn*s;    
end

% s = subs(s, sin(t2), t2);
% s = subs(s, cos(t2), zer);
% s = subs(s, sin(t3), t3);
% s = subs(s, cos(t3), zer);
% s = subs(s, sin(t4), t4);
% s = subs(s, cos(t4), zer);
% s = subs(s, sin(t5), t5);
% s = subs(s, cos(t5), zer);

tau_rw = sym('tauRW')
syms hs1 hs2 hs dhs1 dhs2 dhs real

h_s = [zer; zer; hs];
d_hs = [zer; zer; tau_rw];

% z7 = [0.01;0.015;1];
% z7 = z7/sqrt(z7'*z7)
z7 = z_n(:,7);


% d_hs = tau_rw*z7;

r = (s')*d_hs;

R = -(s') * xmat(h_s) * s;
R = simplify(R);


[ndof, g0, r_n1_n, z_n, p_n, m_n, c_n, ...
    i_n, m_w_n,  i_rw, bear_k_cst, bear_c_cst, k_d, b_d, ...
    w_rw_max, w_rw_nom, hs_rw, hs_rw_max, a_flex, b_flex, a_df, b_df] = init_func();

M = compute_mass_matrix_symb(thet, z_n, r_n1_n, m_w_n, p_n);
M = subs(M, t1, zer);
M = subs(M, t2, zer);
M = subs(M, t3, zer);
M = subs(M, t4, zer);
M = subs(M, t5, zer);
M = subs(M, t6, zer);
% M = subs(M, t7, zer);
% M = subs(M, t8, zer);
% M = subs(M, t9, -0.7);

% M = eval(M);

Mi = inv(M);
% M1 = subs(Mi, t7, zer);
% M1 = subs(M1, t8, 0.1);
% M1 = subs(M1, t9, -0.7);
% m1 = vpa(M1)
% 
% M2 = subs(Mi, t7, zer);
% M2 = subs(M2, t8, zer);
% M2 = subs(M2, t9, -0.7);
% m2 = vpa(M2)
% 
% M3 = subs(Mi, t7, zer);
% M3 = subs(M3, t8, -0.1);
% M3 = subs(M3, t9, -0.7);
% m3 = vpa(M3)

% M4 = subs(Mi, t7, zer);
% M4 = subs(M4, t8, zer);
% M4 = subs(M4, t9, -0.6);
% m4 = vpa(M4)
% 
% M5 = subs(Mi, t7, zer);
% M5 = subs(M5, t8, zer);
% M5 = subs(M5, t9, -0.8);
% m5 = vpa(M5)



Pot = compute_potential_energy_term_symb(thet, c_n, z_n, m_n, r_n1_n, g0);

% theta_spring = theta;
% theta_spring(9) = theta(9) - thet_pit_nom;
% 
spring = k_d.*thet

% damp = b_d.*dtheta;
% 
% %place holder
% [R,r, d_hs] = RW_terms(theta, dtheta, z_n, hs, tau_rw, hs_rw_max);
% 
% %calculate joint torques from gravity elasticity and damnping according
% %to eq 3.37
% torques = tau_applied - (Pot + spring + damp + R + r);
syms tau_p tau_r

tau = sym(zeros(9,1));
tau(8) = tau_r;
tau(9) = tau_p;


mod = Mi*(tau-(R*d_thet)-r-spring-Pot);
% mod = simplify(mod);

A_pend = [diff(mod, t7), ...
    diff(mod, t8), diff(mod, t9),  ...
    diff(mod, dt7),  diff(mod, dt8), diff(mod, dt9)];

A_gond = A_pend(7:9, :);

A_gond = subs(A_gond, t1, zer);
A_gond = subs(A_gond, t2, zer);
A_gond = subs(A_gond, t3, zer);
A_gond = subs(A_gond, t4, zer);
A_gond = subs(A_gond, t5, zer);
A_gond = subs(A_gond, t6, zer);
% A_gond = subs(A_gond, t7, zer);
% A_gond = subs(A_gond, t8, zer);
% A_gond = subs(A_gond, t9, zer);
A_gond = subs(A_gond, dt1, zer);
A_gond = subs(A_gond, dt2, zer);
A_gond = subs(A_gond, dt3, zer);
A_gond = subs(A_gond, dt4, zer);
A_gond = subs(A_gond, dt5, zer);
A_gond = subs(A_gond, dt6, zer);
% A_gond = subs(A_gond, dt7, zer);
% A_gond = subs(A_gond, dt8, zer);
% A_gond = subs(A_gond, dt9, zer);

A_gond = subs(A_gond, hs1, zer);
A_gond = subs(A_gond, hs2, zer);
A_gond = subs(A_gond, dhs1, zer);
A_gond = subs(A_gond, dhs2, zer);
% A_gond = vpa(simplify(A_gond),2)

B_pend = [diff(mod, tau_rw), diff(mod, tau_r), diff(mod, tau_p)];

B_gond = B_pend(7:9,:);

B_gond = subs(B_gond, t1, zer);
B_gond = subs(B_gond, t2, zer);
B_gond = subs(B_gond, t3, zer);
B_gond = subs(B_gond, t4, zer);
B_gond = subs(B_gond, t5, zer);
% B_gond = subs(B_gond, t6, zer);
% B_gond = subs(B_gond, t7, zer);
% B_gond = subs(B_gond, t8, zer);
% B_gond = subs(B_gond, t9, zer);
B_gond = subs(B_gond, dt1, zer);
B_gond = subs(B_gond, dt2, zer);
B_gond = subs(B_gond, dt3, zer);
B_gond = subs(B_gond, dt4, zer);
B_gond = subs(B_gond, dt5, zer);
% B_gond = subs(B_gond, dt6, zer);
% B_gond = subs(B_gond, dt7, zer);
% B_gond = subs(B_gond, dt8, zer);
% B_gond = subs(B_gond, dt9, zer);

B_gond = subs(B_gond, hs1, zer);
B_gond = subs(B_gond, hs2, zer);
B_gond = subs(B_gond, dhs1, zer);
B_gond = subs(B_gond, dhs2, zer);
% B_gond = vpa(simplify(B_gond),2)



roll_torque = 0.1*k_d(8)

Ap = subs(A_gond, t7, zer);
Ap = subs(Ap, t8, 0.1);
Ap = subs(Ap, t9, -40*pi/180);
Ap = subs(Ap, tau_p, zer);
Ap = subs(Ap, tau_rw, zer);
Ap = subs(Ap, tau_r, roll_torque);



An = subs(A_gond, t7, zer);
An = subs(An, t8, -0.1);
An = subs(An, t9, -40*pi/180);
An = subs(An, tau_p, zer);
An = subs(An, tau_rw, zer);
An = subs(An, tau_r, -roll_torque);



Bp = subs(B_gond, t7, zer);
Bp = subs(Bp, t8, 0.1);
Bp = subs(Bp, t9, -40*pi/180);
Bp = subs(Bp, tau_p, zer);
Bp = subs(Bp, tau_rw, zer);
Bp = subs(Bp, tau_r, roll_torque);



Bn = subs(B_gond, t7, zer);
Bn = subs(Bn, t8, -0.1);
Bn = subs(Bn, t9, -40*pi/180);
Bn = subs(Bn, tau_p, zer);
Bn = subs(Bn, tau_rw, zer);
Bn = subs(Bn, tau_r, -roll_torque);

Apos = zeros(6,6);
Aneg = Apos;
Bpos = zeros(6,3);
Bneg = Bpos;

Apos(1:3,4:6) = eye(3);
Apos(4:6,:) = eval(Ap);
Bpos(4:6,:) = eval(Bp);

Aneg(1:3,4:6) = eye(3);
Aneg(4:6,:) = eval(An);
Bneg(4:6,:) = eval(Bn);

clear M Mi Pot spring A_pend A_gond B_pend B_gond



C_mat = sym(zeros(6,6));

S = [cos(t9), 0, -cos(t8)*sin(t9);
        0, 1, sin(t8);
        sin(t9), 0, cos(t9)*cos(t8)]

S_new = sym(zeros(3,3));
S_new(:,1) = S(:,3);
S_new(:,2) = S(:,1);
S_new(:,3) = S(:,2);



syms y p r real
rot = axis2rot_symb(z_n(:,9), t9) * axis2rot_symb(z_n(:,8), t8) * axis2rot_symb(z_n(:,7), t7)

ir_e = atan2(rot(2,3),rot(3,3))
el_e = asin(rot(1,3))
az_e = atan2(-rot(1,2), rot(1,1))

hor = [ir_e;el_e;az_e];

C_pos = [diff(hor, t7), diff(hor,t8), diff(hor,t9)]

C_mat(1:3,1:3) = C_pos;
C_mat(4:6,4:6) = S_new;

Cpos = subs(C_mat, t7, 0.0);
Cpos = subs(Cpos, t8, 0.1);
Cpos = eval(subs(Cpos, t9, -40*pi/180))

Cneg = subs(C_mat, t8, -0.1);
Cneg = subs(Cneg, t7, 0.0);
Cneg = eval(subs(Cneg, t9, -40*pi/180))

Aneut = (Apos+Aneg)/2;
Bneut = (Bpos + Bneg)/2;
Cneut = (Cpos+Cneg)/2;
save('ss_mats.mat', '-mat', 'Aneut', 'Bneut', 'Cneut')


%% Robust Servomechanism
freq_osc2 = 0.106667 * 2*pi;
freq_osc1 = 0.0466664* 2*pi;
% freq_osc2 = sqrt(0.106667);
% freq_osc1 = sqrt(0.0466664);
% damp_osc1 = 0.000;
% damp_osc2 = 0.000;

ad1 = [0 1;
       -freq_osc1^2 0];
ad2 = [0 1;
       -freq_osc2^2 0];

ad_comb = [ad1, zeros(2,2); zeros(2,2), ad2]

eig(ad_comb)

% rank(obsv(adist1, cdist1))

% obsv(aref, cref)

A1 = sym(ad_comb);
syms x

poly1 = charpoly(A1,x)

p = zeros(4,4);
p(1:3,2:4) = eye(3);

tmp = -double(coeffs(poly1, 'All'));
p(4, :) = tmp(end:-1:2);

rstr = zeros(4,1);
rstr(1) = 1;
rstr(3) = 1;

rank(ctrb(p, rstr))

dist_gain = [-1 -1 -1 -1];




